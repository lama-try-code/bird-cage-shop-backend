// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace backend_not_clear.Models
{
    public partial class BCS_ShopContext : DbContext
    {
        public BCS_ShopContext()
        {
        }

        public BCS_ShopContext(DbContextOptions<BCS_ShopContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Bird> Bird { get; set; }
        public virtual DbSet<BirdProduct> BirdProduct { get; set; }
        public virtual DbSet<BirdType> BirdType { get; set; }
        public virtual DbSet<Blog> Blog { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CategoryProduct> CategoryProduct { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<ColorProduct> ColorProduct { get; set; }
        public virtual DbSet<FeedBack> FeedBack { get; set; }
        public virtual DbSet<Image> Image { get; set; }
        public virtual DbSet<Material> Material { get; set; }
        public virtual DbSet<MaterialProduct> MaterialProduct { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductCustom> ProductCustom { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Size> Size { get; set; }
        public virtual DbSet<SizeProduct> SizeProduct { get; set; }
        public virtual DbSet<Style> Style { get; set; }
        public virtual DbSet<StyleProduct> StyleProduct { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Voucher> Voucher { get; set; }
        public virtual DbSet<VoucherUserOrder> VoucherUserOrder { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                // server
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                //optionsBuilder.UseSqlServer("Data Source=bcsswp.database.windows.net;Initial Catalog=BCS_SWP391;Persist Security Info=True;User ID=lmao;Password=115237Lam");
                // local
                optionsBuilder.UseSqlServer("Data Source=Lamaa;Initial Catalog=BCS_SWP391;Persist Security Info=True;User ID=sa;Password=12345");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Bird>(entity =>
            {
                entity.HasOne(d => d.BirdSizeNavigation)
                    .WithMany(p => p.Bird)
                    .HasForeignKey(d => d.BirdSize)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bird_Size");

                entity.HasOne(d => d.BirdTypeNavigation)
                    .WithMany(p => p.Bird)
                    .HasForeignKey(d => d.BirdType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bird_BirdType");
            });

            modelBuilder.Entity<BirdProduct>(entity =>
            {
                entity.HasKey(e => new { e.BirdId, e.ProductId });

                entity.HasOne(d => d.Bird)
                    .WithMany(p => p.BirdProduct)
                    .HasForeignKey(d => d.BirdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BirdProduct_Bird");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.BirdProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BirdProduct_Product");
            });

            modelBuilder.Entity<Blog>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Blog)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Blog_User");
            });

            modelBuilder.Entity<CategoryProduct>(entity =>
            {
                entity.HasKey(e => new { e.CategoryId, e.ProductId });

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.CategoryProduct)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CategoryProduct_Category");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CategoryProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CategoryProduct_Product");
            });

            modelBuilder.Entity<Color>(entity =>
            {
                entity.HasOne(d => d.Material)
                    .WithMany(p => p.Color)
                    .HasForeignKey(d => d.MaterialId)
                    .HasConstraintName("FK_Color_Material");
            });

            modelBuilder.Entity<ColorProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ColorId });

                entity.HasOne(d => d.Color)
                    .WithMany(p => p.ColorProduct)
                    .HasForeignKey(d => d.ColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ColorProduct_Color");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ColorProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ColorProduct_Product");
            });

            modelBuilder.Entity<FeedBack>(entity =>
            {
                entity.Property(e => e.Rating).IsFixedLength();

                entity.HasOne(d => d.Reply)
                    .WithMany(p => p.InverseReply)
                    .HasForeignKey(d => d.ReplyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeedBack_FeedBack");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.FeedBack)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeedBack_User");
            });

            modelBuilder.Entity<Image>(entity =>
            {
                entity.HasOne(d => d.Bird)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.BirdId)
                    .HasConstraintName("FK_Image_Bird");

                entity.HasOne(d => d.Blog)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.BlogId)
                    .HasConstraintName("FK_Image_Blog");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.MaterialId)
                    .HasConstraintName("FK_Image_Material");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Image_Product");

                entity.HasOne(d => d.Size)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.SizeId)
                    .HasConstraintName("FK_Image_Size");

                entity.HasOne(d => d.Style)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.StyleId)
                    .HasConstraintName("FK_Image_Style");
            });

            modelBuilder.Entity<Material>(entity =>
            {
                entity.HasOne(d => d.Size)
                    .WithMany(p => p.Material)
                    .HasForeignKey(d => d.SizeId)
                    .HasConstraintName("FK_Material_Size");
            });

            modelBuilder.Entity<MaterialProduct>(entity =>
            {
                entity.HasKey(e => new { e.MaterialId, e.ProductId });

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.MaterialProduct)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MaterialProduct_Material");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.MaterialProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MaterialProduct_Product");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_User");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductId });

                entity.HasOne(d => d.Feedback)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.FeedbackId)
                    .HasConstraintName("FK_OrderDetail_FeedBack");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Order");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Product");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Payment)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Payment_Order");
            });

            modelBuilder.Entity<ProductCustom>(entity =>
            {
                entity.HasOne(d => d.ProductColorNavigation)
                    .WithMany(p => p.ProductCustom)
                    .HasForeignKey(d => d.ProductColor)
                    .HasConstraintName("FK_ProductCustom_Color");

                entity.HasOne(d => d.ProductMaterialNavigation)
                    .WithMany(p => p.ProductCustom)
                    .HasForeignKey(d => d.ProductMaterial)
                    .HasConstraintName("FK_ProductCustom_Material");

                entity.HasOne(d => d.ProductSizeNavigation)
                    .WithMany(p => p.ProductCustom)
                    .HasForeignKey(d => d.ProductSize)
                    .HasConstraintName("FK_ProductCustom_Size");

                entity.HasOne(d => d.ProductStyleNavigation)
                    .WithMany(p => p.ProductCustom)
                    .HasForeignKey(d => d.ProductStyle)
                    .HasConstraintName("FK_ProductCustom_Style");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductCustom)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCustom_User1");
            });

            modelBuilder.Entity<Size>(entity =>
            {
                entity.HasOne(d => d.Style)
                    .WithMany(p => p.Size)
                    .HasForeignKey(d => d.StyleId)
                    .HasConstraintName("FK_Size_Style");
            });

            modelBuilder.Entity<SizeProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.SizeId });

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.SizeProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SizeProduct_Product");

                entity.HasOne(d => d.Size)
                    .WithMany(p => p.SizeProduct)
                    .HasForeignKey(d => d.SizeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SizeProduct_Size");
            });

            modelBuilder.Entity<StyleProduct>(entity =>
            {
                entity.HasKey(e => new { e.StyleId, e.ProductId });

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.StyleProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StyleProduct_Product");

                entity.HasOne(d => d.Style)
                    .WithMany(p => p.StyleProduct)
                    .HasForeignKey(d => d.StyleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StyleProduct_Style");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasOne(d => d.Role)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Role1");
            });

            modelBuilder.Entity<VoucherUserOrder>(entity =>
            {
                entity.HasKey(e => new { e.VoucherId, e.OrderId, e.UserId });

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.VoucherUserOrder)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VoucherUserOrder_Order");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.VoucherUserOrder)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VoucherUserOrder_User");

                entity.HasOne(d => d.Voucher)
                    .WithMany(p => p.VoucherUserOrder)
                    .HasForeignKey(d => d.VoucherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VoucherUserOrder_Voucher");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}